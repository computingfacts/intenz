//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.0-b52-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2006.09.20 at 09:38:22 AM BST 
//


package uk.ac.ebi.intenz.tools.export.jaxb;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;


/**
 * <p>Java class for databaseType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="databaseType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="BRENDA"/>
 *     &lt;enumeration value="CAS"/>
 *     &lt;enumeration value="ERGO"/>
 *     &lt;enumeration value="ExPASy"/>
 *     &lt;enumeration value="GO"/>
 *     &lt;enumeration value="KEGG ENZYME"/>
 *     &lt;enumeration value="MEROPS"/>
 *     &lt;enumeration value="NIST 74"/>
 *     &lt;enumeration value="UM-BBD"/>
 *     &lt;enumeration value="WIT"/>
 *     &lt;enumeration value="Diagram"/>
 *     &lt;enumeration value="MIM"/>
 *     &lt;enumeration value="PROSITE"/>
 *     &lt;enumeration value="UniProt"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlEnum
public enum DatabaseType {

    BRENDA("BRENDA"),
    CAS("CAS"),
    @XmlEnumValue("Diagram")
    DIAGRAM("Diagram"),
    ERGO("ERGO"),
    @XmlEnumValue("ExPASy")
    EX_PA_SY("ExPASy"),
    GO("GO"),
    @XmlEnumValue("KEGG ENZYME")
    KEGG_ENZYME("KEGG ENZYME"),
    MEROPS("MEROPS"),
    MIM("MIM"),
    @XmlEnumValue("NIST 74")
    NIST_74("NIST 74"),
    PROSITE("PROSITE"),
    @XmlEnumValue("UM-BBD")
    UM_BBD("UM-BBD"),
    @XmlEnumValue("UniProt")
    UNI_PROT("UniProt"),
    WIT("WIT");
    private final String value;

    DatabaseType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static DatabaseType fromValue(String v) {
        for (DatabaseType c: DatabaseType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v.toString());
    }

}
